# -*- generated by 1.0.12 -*-
import da
PatternExpr_354 = da.pat.TuplePattern([da.pat.ConstantPattern('successor'), da.pat.FreePattern('query'), da.pat.FreePattern('succ_node')])
PatternExpr_376 = da.pat.TuplePattern([da.pat.ConstantPattern('result'), da.pat.FreePattern('query'), da.pat.FreePattern('result'), da.pat.FreePattern('authority')])
_config_object = {}
import logging
import random
import hashlib
import time

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_354, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_353]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_376, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_375])])

    def setup(self, process_id, m, node_tuples, website, **rest_507):
        super().setup(process_id=process_id, m=m, node_tuples=node_tuples, website=website, **rest_507)
        self._state.process_id = process_id
        self._state.m = m
        self._state.node_tuples = node_tuples
        self._state.website = website
        self._state.process_id = self._state.process_id
        self._state.m = self._state.m
        self._state.node_tuples = self._state.node_tuples
        self._state.website = self._state.website
        self._state.query_count = 0
        self._state.start_times = dict()
        self._state.end_times = dict()
        self._state.resolution_latencies = set()
        self._state.hops = 0
        self._state.sleep_time = 0
        self._state.namesList = list()

    def run(self):
        self.output(self._state.process_id, ' has been started.')
        for name in self._state.website:
            self.resolve(name)
        super()._label('_st_label_266', block=False)
        _st_label_266 = 0
        while (_st_label_266 == 0):
            _st_label_266 += 1
            if False:
                _st_label_266 += 1
            else:
                super()._label('_st_label_266', block=True)
                _st_label_266 -= 1

    def resolve(self, name):
        node_tuple = random.choice(self._state.node_tuples)
        self._state.query_count += 1
        query = {'key': name, 'id': self.hash_func(name, self._state.m), 'request_id': self.obtain_request_id(), 'client': self._state.process_id, 'hops': self._state.hops, 'hops_name_list': self._state.namesList}
        self._state.start_times[query['request_id']] = time.time()
        self.send(('find_successor', query), to=node_tuple[1])
        self.output('Sent find_successor message for query: {q} to {node}'.format(q=query, node=node_tuple))
        super()._label('_st_label_343', block=False)
        _st_label_343 = 0
        while (_st_label_343 == 0):
            _st_label_343 += 1
            if (query['request_id'] in self._state.end_times):
                _st_label_343 += 1
            else:
                super()._label('_st_label_343', block=True)
                _st_label_343 -= 1

    def hash_func(self, name, m):
        hash = int(hashlib.sha1(name.encode('utf-8')).hexdigest(), 16)
        hash_val = (hash % (2 ** m))
        return hash_val

    def obtain_request_id(self):
        return ((str(self._state.process_id) + '-') + str(self._state.query_count))

    def _Client_handler_353(self, query, succ_node):
        self.send(('get', query), to=succ_node[1])
        self.output('Sent get to: ', succ_node)
    _Client_handler_353._labels = None
    _Client_handler_353._notlabels = None

    def _Client_handler_375(self, query, result, authority):
        self._state.end_times[query['request_id']] = time.time()
        self.output('Result of query for {query} = {ipaddr}'.format(query=query['key'], ipaddr=result))
        self._state.resolution_latencies.add((self._state.end_times[query['request_id']] - self._state.start_times[query['request_id']]))
        self.output('{key}, {resTime}, {hops}, {nodesList}'.format(key=query['key'], hops=query['hops'], resTime=int(round(((self._state.end_times[query['request_id']] - self._state.start_times[query['request_id']]) * 1000), 0)), nodesList=query['hops_name_list']), level=logging.DEBUG)
    _Client_handler_375._labels = None
    _Client_handler_375._notlabels = None
