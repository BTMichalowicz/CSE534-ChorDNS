import bisect
import random
import os
import socket
import struct
from hash_func import hash_func

node_client = import_da('client')
node_chord = import_da('chord')

def read_input_file(filename):
	# Read the entire input dataset
	datas = []
	input_file = open(filename, 'r')
	for line in input_file:
		datas.append(tuple(line.strip().split(' ')))
	return datas

def build_setup_args(idx, m, node_tuples, hashed_nodes_keys, hashed_datas, hashed_datas_keys):
	# Building data required to setup a node in Chord system
	setup_args = {}
	setup_args['pred_node'] = node_tuples[idx - 1]
	setup_args['succ_node'] = node_tuples[(idx + 1) % len(hashed_nodes_keys)]
	setup_args['finger_table'] = build_finger_table(idx, m, node_tuples, hashed_nodes_keys)
	setup_args['node_datas'] = assign_datas_to_node(idx, hashed_datas, hashed_datas_keys, hashed_nodes_keys)
	return setup_args

def build_finger_table(idx, m, node_tuples, hashed_nodes_keys):
	#  Build the finger table for each node in the Chord system
	hash_val = hashed_nodes_keys[idx]
	finger_table = []
	for i in range(0, m):
		finger_idx = bisect.bisect_left(hashed_nodes_keys, (hash_val + 2**i) % 2**m)
		finger_table.append(node_tuples[finger_idx % len(node_tuples)])
	return finger_table

def assign_datas_to_node(idx, hashed_datas, hashed_datas_keys, hashed_nodes_keys):
	#  Distribute and assign DNS data to each node in the Chord system
	limit_s = hashed_nodes_keys[idx - 1]
	limit_e = hashed_nodes_keys[idx]

	start = bisect.bisect(hashed_datas_keys, limit_s)
	# start = find_index(hashed_datas_keys, limit_s)
	end = bisect.bisect(hashed_datas_keys, limit_e)
	#end = find_index(hashed_datas_keys, limit_e)

	datas = {}
	if limit_s <= limit_e:
		for i in range(start, end):
			hash_val = hashed_datas_keys[i]
			datas[hash_val] = hashed_datas[hash_val]

	else:
		for i in range(start, len(hashed_datas_keys)):
			hash_val = hashed_datas_keys[i]
			datas[hash_val] = hashed_datas[hash_val]
		for i in range(0, end):
			hash_val = hashed_datas_keys[i]
			datas[hash_val] = hashed_datas[hash_val]

	return datas

def take_input():
	# Accept URL from the user to resolve
	query = input("Enter query in the format <domain_name><space><query_type>: ")
	inputs = query.split(' ')
	return inputs[0], inputs[1]

#def find_index(sorted_hash_vals, value):
#	try:
#		keys = sorted_hash_vals
#		i = int(len(keys)/2)
#		while i > 0 and len(keys) > 1:
#			if value > keys[i]:
#				if len(keys[i+1:]) != 0:
#					keys = keys[i+1:]
#				else:
#					keys = keys[i:]
#			elif value < keys[i]:
#				keys = keys[:i]
#			i = int(i/2)
#		idx = sorted_hash_vals.index(keys[0])
#		if value > keys[0]:
#			return idx + 1
#		else:
#			return idx
#	except:
#		print(value)
#		print(i)
#		print(keys)

def main():

	m = 50
	datas = read_input_file('data/Final-400K_dev_10K.txt')

	hash_vals = []
	repeats = []
	nodes = []
	for i in datas:
		hash_val = hash_func(i[0], m)
		if hash_val not in hash_vals:
			hash_vals.append(hash_val)
		else:
			repeats.append((hash_val, i))
	output('Total collison by the hash function: ', len(repeats))

	hashed_datas = {hash_func(data[0], m): data for data in datas}
	hashed_datas_keys = list(hashed_datas.keys())
	hashed_datas_keys.sort()

	nodes = []
	for i in range(0, 50):
		nodes.append(socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff))))

	hashed_nodes = {hash_func(node, m): node for node in nodes}
	hashed_nodes_keys = list(hashed_nodes.keys())
	hashed_nodes_keys.sort()
	output('Hash values for all the nodes in sorted order: ', hashed_nodes_keys)

	config(channel={'reliable', 'fifo'})
	# Creating a process for each node
	chord_processes = list(new(node_chord.Chord, num=len(hashed_nodes_keys)))

	# Binding hash_val, node process and node IP address for each node in a tuple
	node_tuples = []
	for i in range(0, len(hashed_nodes_keys)):
		node_tuples.append((hashed_nodes_keys[i], chord_processes[i], nodes[i]))

	# Building argumets required to setup a node in Chord systems
	# At the end, the Chord system will be setup in a ring topology
	for i in range(0, len(hashed_nodes_keys)):
		setup_args = build_setup_args(i, m, node_tuples, hashed_nodes_keys, hashed_datas, hashed_datas_keys)
		setup(chord_processes[i], args=(node_tuples[i], m, setup_args['pred_node'], setup_args['succ_node'], setup_args['finger_table'], setup_args['node_datas']))

	# Starting the Chord ring
	start(chord_processes)

	# Prompting user for input
	website, query_type = take_input()
	#query_type = 'A'

	# Creating, setting up, and starting a client process which will consult the Chord system to resolve the DNS query by the user
	client_process = new(node_client.Client)
	setup(client_process, args=(client_process, m, node_tuples, [website], query_type))
	start(client_process)

	await(False)
